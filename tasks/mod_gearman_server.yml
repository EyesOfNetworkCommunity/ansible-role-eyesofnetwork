---
# task mod_gearman



- name: install 'mod_gearman' packages
  yum:
    name:  ['gearmand', 'gearmand-server', 'mod_gearman']
    state: latest


- name: copy secret file to each nodes
  template:
    src: mod_gearman/secret.file.j2
    dest: "{{ mod_gearman_key_path }}"
    owner: root
    group: root
    mode: 0644

- name: generate template server to server node
  template:
    src: mod_gearman/module.conf.j2
    dest: /etc/mod_gearman/module.conf
    owner: root
    group: root
    mode: 0644

- name: generate template worker to worker node
  template:
    src: mod_gearman/worker.conf.j2
    dest: /etc/mod_gearman/worker.conf
    owner: root
    group: root
    mode: 0644


- name: change user context execution for worker
  ini_file:
    path: "/usr/lib/systemd/system/mod-gearman-worker.service"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  loop:
    - { section: "Service", option: "User", value: "nagios" }
    - { section: "Service", option: "Group", value: "eyesofnetwork" }
  notify: reload systemd daemon

- name: Systemd reload now
  meta: flush_handlers

- name: change permission for worker on directory
  file:
    owner: "nagios"
    path: "{{ item }}"
    recurse: yes
  loop:
    - /var/mod_gearman
    - /var/log/mod_gearman

- name: restart mod-gearman-worker on each nodes
  service:
    name: mod-gearman-worker
    enabled: yes
    state: restarted

- name: stop gearmand on server
  service:
    name: gearmand
    state: stopped

- name: delete retention file on server
  file:
    path: /tmp/gearmand.retention
    state: absent

- name: restart gearmand on server
  service:
    name: gearmand
    enabled: yes
    state: restarted

- name: use eonapi to add broker
  uri:
    url: "{{ eon_api_url }}/addEventBroker?username={{ eon_api_user }}&apiKey={{ eon_api_token }}"
    method: POST
    headers:
      Content-Type: "application/json"
    body: '{ "broker" : "{{ mod_gearman_broker }}", "exportConfiguration": true }'
    body_format: json
    return_content: yes
    validate_certs: no
  register: returnapi

- name : display result
  debug:
    msg: "{{ returnapi.content }}"

- name: Fail if ERROR in the page content
  fail:
  when: "'ERROR' in returnapi.content"
